// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(uuid())
  username  String       @unique
  password  String
  name      String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  birthday  DateTime?
  bio       String?
  avatarUrl String?
  chats     ChatMember[]
  messages  Message[]
  verified  Boolean      @default(false)

  sentRequests     FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
  friends          Friend[]        @relation("UserFriends")
  friendedBy       Friend[]        @relation("FriendUsers")
}

model FriendRequest {
  id         String   @id @default(uuid())
  fromUser   User     @relation("SentRequests", fields: [fromUserId], references: [id])
  fromUserId String
  toUser     User     @relation("ReceivedRequests", fields: [toUserId], references: [id])
  toUserId   String
  status     String   @default("pending") // pending | accepted | declined
  createdAt  DateTime @default(now())

  @@unique([fromUserId, toUserId]) // чтобы нельзя было отправить дважды
}

model Friend {
  id        String   @id @default(uuid())
  user      User     @relation("UserFriends", fields: [userId], references: [id])
  userId    String
  friend    User     @relation("FriendUsers", fields: [friendId], references: [id])
  friendId  String
  createdAt DateTime @default(now())

  @@unique([userId, friendId])
}

model Chat {
  id        String   @id @default(uuid())
  type      String   @default("private") // private, group, channel
  name      String? // название чата (для групповых чатов)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members  ChatMember[]
  messages Message[]
}

model ChatMember {
  id       String   @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  chat     Chat     @relation(fields: [chatId], references: [id])
  chatId   String
  role     String   @default("member")
  joinedAt DateTime @default(now())

  @@unique([userId, chatId])
}

model Message {
  id        String   @id @default(uuid())
  text      String?
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String

  files FileAttachment[]
}

model FileAttachment {
  id        String  @id @default(uuid())
  url       String // ссылка на файл (например, S3 / локальное хранилище)
  name      String?
  type      String // mime-type (image/png, video/mp4 и т.п.)
  size      Int // размер в байтах
  message   Message @relation(fields: [messageId], references: [id])
  messageId String
}
